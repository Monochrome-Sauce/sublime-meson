%YAML 1.2
---
# http://www.sublimetext.com/docs/syntax.html
# https://mesonbuild.com/Syntax.html#grammar
name: Meson
file_extensions:
  - meson.build
  - meson_options.txt
scope: source.meson
variables:
  identifier: \b[a-zA-Z_]\w*\b
  char_hex: '[a-fA-F0-9]'
  char_oct: '[0-7]'
  char_bin: '[0-1]'
  char_str: ''''
  char_fmt: '@'
  escape_sequences: (\\\\)|(\\')|(\\a)|(\\b)|(\\f)|(\\n)|(\\r)|(\\t)|(\\v)|(\\{{char_oct}}{3})|(\\x{{char_hex}}{2})|(\\u{{char_hex}}{4})|(\\U{{char_hex}}{8})
  builtin_operators: (\+|\-|\*|\/|%)
  builtin_objects: \b(build_machine|host_machine|meson|target_machine)\b
  builtin_functions: |-
    (?x)\b(
        add_global_arguments
      | add_global_link_arguments
      | add_languages
      | add_project_arguments
      | add_project_dependencies
      | add_project_link_arguments
      | add_test_setup
      | alias_target
      | assert
      | benchmark
      | both_libraries
      | build_target
      | configuration_data
      | configure_file
      | custom_target
      | debug
      | declare_dependency
      | dependency
      | disabler
      | environment
      | error
      | executable
      | files
      | find_program
      | generator
      | get_option
      | get_variable
      | import
      | include_directories
      | install_data
      | install_emptydir
      | install_headers
      | install_man
      | install_subdir
      | install_symlink
      | is_disabler
      | is_variable
      | jar
      | join_paths
      | library
      | message
      | project
      | range
      | run_command
      | run_target
      | set_variable
      | shared_library
      | shared_module
      | static_library
      | structured_sources
      | subdir
      | subdir_done
      | subproject
      | summary
      | test
      | unset_variable
      | vcs_tag
      | warning
      )\b

contexts:
  main:
    - include: comments
    - include: keywords
    - include: operators
    - include: literals
    - include: functions
    - match: '{{builtin_objects}}'
      scope: variable.language.builtin.meson

  else-pop:
    - match: (?=\S)
      pop: true

  comments:
    - match: \#.*$
      scope: comment.line.meson

  keywords:
    - match: \b(if|else|elif|endif|foreach|endforeach|break|continue)\b
      scope: keyword.operator.word.control-flow.meson
    - match: \b(and|or|not|in)\b
      scope: keyword.operator.word.logical.meson

  operators:
    - match: '\b[\S]+[\s]*(\?)[\s]*[\S]+[\s]*(\:)[\s]*[\S]+\b'
      captures:
        1: keyword.operator.ternary.meson
        2: keyword.operator.ternary.meson
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.meson
    - match: '{{builtin_operators}}?\='
      scope: keyword.operator.assignment.meson
    - match: '{{builtin_operators}}'
      scope: keyword.operator.arithmetic.meson



# ---- LITERAL --------------------------------------------------------

  literals:
    - include: literal_string
    - include: literal_boolean
    - include: literal_integer
    - include: literal_float

  literal_string:
    - include: fstring_line
    - include: fstring_multiline
    - include: string_line
    - include: string_multiline

  literal_boolean:
    - match: \b(true|false)\b
      scope: constant.language.meson

  literal_integer:
    - match: \b((0x{{char_hex}}+)|(0o{{char_oct}}+)|(0b{{char_bin}}+)|([0-9]+))\b
      scope: constant.numeric.integer.meson

  literal_float:
    - match: '\b([1-9]+[0-9]*\.[0-9]*)'
      scope: constant.numeric.float.meson



# ---- FUNCTION ----------------------------------------------------------------

  functions:
    - include: function_builtin
    - include: function_instance_builtin
    - include: function_named_parameter

  function_builtin:
    - match: |-
        (?x)\b({{builtin_functions}})\b\s*\(
      captures:
        1: support.function.builtin.meson

  function_instance_builtin:
    - match: |-
        \.\b({{identifier}})\b\s*\(
      captures:
        1: variable.function.builtin.meson

  function_named_parameter:
    - match: '\b({{identifier}})\s*:'
      captures:
        1: variable.parameter.named.meson



# ---- STRING ------------------------------------------------------------------

  string_line:
    - match: '{{char_str}}'
      scope: punctuation.definition.string.begin.meson
      push:
        - meta_include_prototype: false
        - meta_content_scope: string.line.meson
        - include: string_escape_sequences
        - match: '{{char_str}}'
          scope: punctuation.definition.string.end.meson
          pop: true

  string_multiline:
    - match: '{{char_str}}{3}'
      scope: punctuation.definition.string.begin.meson
      push:
        - meta_include_prototype: false
        - meta_content_scope: string.multiline.meson
        - match: '{{char_str}}{3}'
          scope: punctuation.definition.string.end.meson
          pop: true

  fstring_line:
    - match: '(f)({{char_str}})'
      captures:
        1: storage.type.string.python
        2: punctuation.definition.string.begin.meson
      push:
        - meta_include_prototype: false
        - meta_content_scope: string.line.meson
        - include: string_escape_sequences
        - include: fstring_substitution
        - match: '{{char_str}}'
          scope: punctuation.definition.string.end.meson
          pop: true

  fstring_multiline:
    - match: '(f)({{char_str}}{3})'
      captures:
        1: storage.type.string.python
        2: punctuation.definition.string.begin.meson
      push:
        - meta_include_prototype: false
        - meta_content_scope: string.multiline.meson
        - include: fstring_substitution
        - match: '{{char_str}}{3}'
          scope: punctuation.definition.string.end.meson
          pop: true

  fstring_substitution:
    - match: '{{char_fmt}}(.*\s+.*|){{char_fmt}}'
      scope: invalid.meson
    - match: '{{char_fmt}}'
      scope: punctuation.section.format.begin.meson
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.format.meson
        - match: '{{char_fmt}}'
          scope: punctuation.section.format.end.meson
          pop: true

  string_escape_sequences:
    - match: '{{escape_sequences}}'
      scope: constant.character.escape.meson
