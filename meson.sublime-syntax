%YAML 1.2
---
# https://mesonbuild.com/Syntax.html#grammar
name: Meson
scope: source.meson
version: 2

file_extensions:
  - meson.build
  - meson_options.txt

variables:
  identifier_continue: '[[:alnum:]_]'
  identifier: '[[:alpha:]_]{{identifier_continue}}*\b'
  identifier_constant: '(?:[\p{Lu}_][\p{Lu}_\d]*)?[\p{Lu}]{2,}[\p{Lu}_\d]*\b'  # require 2 consecutive upper-case letters
  digits: (?:\d+(?:_\d+)*)
  path: '({{identifier}}[ ]*\.[ ]*)*{{identifier}}'
  illegal_names: (?:and|break|continue|elif|else|endforeach|endif|false|foreach|if|in|not|or)
  augmented_assignment_operators: |-
    (?x: \+= )
  assignment_operator: '=(?!=)'
  colon: ':'
  hspace: '[ \t]'
  line_end: '(?:{{hspace}}*[\n#])'
  builtin_functions: |-
    (?x:
      add_global_arguments
    | add_global_link_arguments
    | add_languages
    | add_project_arguments
    | add_project_dependencies
    | add_project_link_arguments
    | add_test_setup
    | alias_target
    | assert
    | benchmark
    | both_libraries
    | build_target
    | configuration_data
    | configure_file
    | custom_target
    | debug
    | declare_dependency
    | dependency
    | disabler
    | environment
    | error
    | executable
    | files
    | find_program
    | generator
    | get_option
    | get_variable
    | import
    | include_directories
    | install_data
    | install_emptydir
    | install_headers
    | install_man
    | install_subdir
    | install_symlink
    | is_disabler
    | is_variable
    | jar
    | join_paths
    | library
    | message
    | project
    | range
    | run_command
    | run_target
    | set_variable
    | shared_library
    | shared_module
    | static_library
    | structured_sources
    | subdir
    | subdir_done
    | subproject
    | summary
    | test
    | unset_variable
    | vcs_tag
    | warning
    )\b
  
  builtin_variables: |-
    (?x: (?:
    # builtin objects
    build_machine | host_machine | meson | target_machine
    )\b )


################################################################################

contexts:
  main:
    - meta_include_prototype: false
    - match: ''
      push: [statements]

  statements:
    - include: line-statements
    - include: block-statements
    - include: statement-terminators
    - include: expression-as-a-statement

  block-statements:
    - include: conditional-statements
    - include: foreach-statements

  line-statements:
    - include: assignment-statements
    - include: flow-statements

  # Always include these last and only one at a time!
  expression-as-a-statement:
    - include: line-continuations
    - include: expressions-common
    - include: qualified-name

  expression-in-a-statement:
    # Differs from expression-as-a-statement in that:
    # - invalid-name matches will pop the current context
    - include: expressions-common
    - include: illegal-name
    - include: qualified-name

  expression-in-a-group:  # Always include this last!
    # Differs from expression-in-a-statement in that:
    # - no assignment expressions allowed
    # - accessor matching continues into the next line
    - include: line-continuations
    - include: expressions-common
    - include: illegal-name
    - include: qualified-name

  expression-in-a-sequence:  # Always include this last!
    # Differs from expression-in-a-statement in that:
    # - accessor matching continues into the next line
    - include: line-continuations
    - include: expressions-common
    - include: illegal-name
    - include: qualified-name

  expressions-common:
    - include: dictionaries
    - include: groups
    - include: lists
    - include: comments
    - include: constants
    - include: numbers
    - include: strings
    - include: operators
    - include: function-calls
    - include: items
    - include: illegal-stray-brackets
    - include: illegal-stray-braces
    - include: illegal-stray-parens


####[ COMMENTS ]################################################################

  comments:
    - match: \#
      scope: punctuation.definition.comment.meson
      push:
        - comment-body

  comment-body:
    - meta_scope: comment.line.number-sign.meson
    - match: \n
      pop: 1


####[ ASSIGNMENT STATEMENTS ]###################################################

  assignment-statements:
    - match: '{{augmented_assignment_operators}}'
      scope: keyword.operator.assignment.augmented.meson
      push: assignment-statement-value
    - match: '{{assignment_operator}}'
      scope: keyword.operator.assignment.meson

  assignment-statement-value:
    - include: line-continuation-or-pop
    - include: expression-in-a-statement


####[ CONDITIONAL STATEMENTS ]##################################################

  conditional-statements:
    - match: if\b
      scope: keyword.control.conditional.if.meson
      push: if-statement-condition
    - match: elif\b
      scope: keyword.control.conditional.elseif.meson
      push: elif-statement-condition
    - match: (else)\b
      scope: meta.statement.conditional.else.meson
      captures:
        1: keyword.control.conditional.else.meson
    - match: (endif)\b
      scope: meta.statement.conditional.endif.meson
      captures:
        1: keyword.control.conditional.endif.meson

  if-statement-condition:
    - meta_scope: meta.statement.conditional.if.meson
    - match: '{{colon}}'
      scope: punctuation.section.block.conditional.if.meson
      pop: 1
    - include: line-continuation-or-pop
    - include: expression-in-a-statement

  elif-statement-condition:
    - meta_scope: meta.statement.conditional.elseif.meson
    - match: '{{colon}}'
      scope: punctuation.section.block.conditional.elseif.meson
      pop: 1
    - include: line-continuation-or-pop
    - include: expression-in-a-statement


####[ FOREACH STATEMENTS ]######################################################

  foreach-statements:
    - match: (foreach)\b
      captures:
        1: keyword.control.loop.foreach.meson
      push: foreach-statement-target-list
    - match: (endforeach)\b
      captures:
        1: keyword.control.loop.endforeach.meson

  foreach-statement-target-list:
    - meta_scope: meta.statement.loop.foreach.meson
    - match: '\s+$'
      scope: invalid.illegal.missing-identifiers.meson
      pop: 1
    - match: '{{colon}}'
      scope: keyword.control.loop.for.in.meson
      set: foreach-statement-in
    - include: line-continuation-or-pop
    - include: expression-in-a-statement

  foreach-statement-in:
    - meta_content_scope: meta.statement.loop.foreach.meson
    - match: \n
      pop: 1
    - include: line-continuation-or-pop
    - include: expression-in-a-statement


####[ FLOW STATEMENTS ]#########################################################

  flow-statements:
    - match: break\b
      scope: keyword.control.flow.break.meson
    - match: continue\b
      scope: keyword.control.flow.continue.meson


####[ FUNCTION CALLS ]##########################################################

  function-calls:
    - match: (?=(\.\s*)?{{path}}\s*\()
      push:
        - function-call-argument-list
        - function-call-wrapper
        - qualified-name-until-leaf

  function-call-wrapper:
    - match: (\.)\s*
      scope: meta.path.meson
      captures:
        1: punctuation.accessor.dot.meson
      set: qualified-function-call-name
    - match: ''
      set: unqualified-function-call-name

  qualified-function-call-name:
    - meta_content_scope: meta.function-call.identifier.meson meta.path.meson
    - include: dotted-name-specials
    - include: constant-names
    - include: function-names
    - include: immediately-pop

  unqualified-function-call-name:
    - meta_scope: meta.function-call.identifier.meson
    - include: name-specials
    - include: function-names
    - include: immediately-pop

  function-call-argument-list:
    - meta_include_prototype: false
    - match: \(
      scope: punctuation.section.arguments.begin.meson
      set:
        - function-call-argument-list-body

  function-call-argument-list-body:
    - meta_scope: meta.function-call.arguments.meson
    - match: \)
      scope: punctuation.section.arguments.end.meson
      set: after-expression
    - include: arguments

  arguments:
    - include: argument-separators
    - include: keyword-arguments
    - include: expression-in-a-sequence

  argument-separators:
    - match: ','
      scope: punctuation.separator.arguments.meson

  keyword-arguments:
    - match: (?={{identifier}}{{hspace}}*{{colon}})
      push: keyword-argument-name

  keyword-argument-name:
    - match: '{{hspace}}'
      scope: keyword.operator.assignment.meson
      set:
        - keyword-argument-value
    - include: parameter-names

  keyword-argument-value:
    - match: (?=[,)]|:(?!{{colon}}))
      pop: 1
    - include: expression-in-a-group


####[ GROUPS ]##################################################################

  groups:
    - match: \(
      scope: punctuation.section.group.begin.meson
      set: group-body

  group-body:
    - meta_scope: meta.group.meson
    - match: \)
      scope: punctuation.section.group.end.meson
      set: after-expression
    - include: expression-in-a-sequence

  illegal-stray-parens:
    - match: \)
      scope: invalid.illegal.stray.meson


####[ LISTS ]###################################################################

  lists:
    - include: empty-lists
    - match: \[
      scope: punctuation.section.sequence.begin.meson
      push:
        - list-body

  list-body:
    - meta_scope: meta.sequence.list.meson
    - match: \]
      scope: punctuation.section.sequence.end.meson
      set: after-expression
    - include: expression-in-a-sequence

  empty-lists:
    - match: (\[)\s*(\])
      scope: meta.sequence.list.empty.meson
      captures:
        1: punctuation.section.sequence.begin.meson
        2: punctuation.section.sequence.end.meson
      push: after-expression

  illegal-stray-brackets:
    - match: \]
      scope: invalid.illegal.stray.meson


####[ DICTIONARIES ]############################################################

  dictionaries:
    - include: empty-dictionaries
    - match: \{
      scope: punctuation.section.mapping.begin.meson
      push: dictionary-body

  dictionary-end:
    - match: \}
      scope: meta.mapping.meson punctuation.section.mapping.end.meson
      set: after-expression

  dictionary-separator:
    - match: ','
      scope: punctuation.separator.sequence.meson
      set: dictionary-body

  dictionary-body:
    - meta_scope: meta.mapping.meson
    - meta_content_scope: meta.mapping.meson
    - include: dictionary-end
    - include: comments
    - include: illegal-commas
    - match: '{{colon}}'
      scope: meta.mapping.meson punctuation.separator.key-value.meson
      set: dictionary-value
    - match: (?=\S)
      set: directory-key-body

  directory-key-body:
    - meta_scope: meta.mapping.key.meson
    - match: (?=\s*[,:}])
      set: dictionary-body
    - include: expression-in-a-group

  dictionary-value:
    - meta_include_prototype: false
    - meta_content_scope: meta.mapping.meson
    - include: dictionary-end
    - include: dictionary-separator
    - match: (?=\S)
      set: directory-value-body

  directory-value-body:
    - meta_content_scope: meta.mapping.value.meson
    - match: (?=\s*[,}])
      set: after-dictionary-value
    - include: expression-in-a-group

  after-dictionary-value:
    - meta_include_prototype: false
    - meta_content_scope: meta.mapping.meson
    - include: dictionary-end
    - include: dictionary-separator

  empty-dictionaries:
    - match: (\{)\s*(\})
      scope: meta.mapping.empty.meson
      captures:
        1: punctuation.section.mapping.begin.meson
        2: punctuation.section.mapping.end.meson
      push: after-expression

  illegal-colons:
    - match: '{{colon}}'
      scope: invalid.illegal.unexpected-colon.meson

  illegal-commas:
    - match: ','
      scope: invalid.illegal.unexpected-comma.meson

  illegal-stray-braces:
    - match: \}
      scope: invalid.illegal.stray.meson


####[ ITEM ACCESS ]#############################################################

  items:
    - match: (?={{path}}\s*\[)
      push:
        - item-access
        - qualified-name-content

  item-access:
    - match: \[
      scope: punctuation.section.brackets.begin.meson
      set: maybe-item-access-body

  maybe-item-access-body:
    - meta_scope: meta.brackets.meson
    - match: \]
      scope: punctuation.section.brackets.end.meson
      set: after-expression
    - include: expression-in-a-group


####[ OPERATORS ]###############################################################

  illegal-assignment:
    - match: \:?=
      scope: invalid.illegal.assignment.meson
      pop: 1
    - include: line-continuation-or-pop
    - include: else-pop

  operators:
    - match: '{{augmented_assignment_operators}}'
      scope: invalid.illegal.assignment.meson
    - match: '[-%*+/]'
      scope: keyword.operator.arithmetic.meson
    - match: <=|>=|==|\!=|<|>
      scope: keyword.operator.comparison.meson
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.meson
    - match: =
      scope: invalid.illegal.assignment.meson
    - match: (?:and|in|is|not|or)\b
      scope: keyword.operator.logical.meson
    - include: sequence-separators

  sequence-separators:
    - match: ','
      scope: punctuation.separator.sequence.meson

  statement-terminators:
    - match: ;
      scope: invalid.illegal.terminator.meson


####[ IDENTIFIERS ]#############################################################

  name:
    - match: (?={{identifier}})
      push: name-content

  name-content:
    - include: name-specials
    - include: constant-names
    - include: generic-names
    - include: immediately-pop

  dotted-name:
    - match: '{hspace}*(\.){hspace}*(?={{identifier}})'
      captures:
        1: punctuation.accessor.dot.meson
      push: dotted-name-content

  dotted-name-content:
    - include: dotted-name-specials
    - include: constant-names
    - include: generic-names
    - include: immediately-pop

  qualified-name:
    - match: (?={{path}})
      push: qualified-name-content
    - match: \.
      scope: punctuation.accessor.dot.meson

  qualified-name-content:
    - meta_scope: meta.path.meson
    - include: name
    - include: dotted-name
    - include: immediately-pop

  qualified-name-until-leaf:
    # Push this together with another context to match a qualified name
    # until the last non-special identifier (if any).
    # This allows the leaf to be scoped individually.
    - meta_scope: meta.path.meson
    # If a line continuation follows, this may or may not be the last leaf (most likley not though)
    - match: (?={{identifier}}\s*(\.|\\))
      push: name-content
    - match: (\.)\s*(?={{identifier}}\s*(\.|\\))
      captures:
        1: punctuation.accessor.dot.meson
      push: dotted-name-content
    - match: \.(?!\s*{{identifier}})  # don't match last dot
      scope: punctuation.accessor.dot.meson
    - match: (?=\S|$)
      pop: 1

  name-specials:
    - include: builtin-functions
    - include: builtin-variables
    - include: illegal-names

  dotted-name-specials:
    - include: builtin-variables
    - include: illegal-names

  builtin-functions:
    - match: '{{builtin_functions}}'
      scope: support.function.builtin.meson

  builtin-variables:
    - match: '{{builtin_variables}}'
      scope: support.variable.magic.meson

  constant-names:
    - match: '{{identifier_constant}}'
      scope: variable.other.constant.meson

  function-names:
    - match: '{{identifier}}'
      scope: variable.function.meson

  generic-names:
    - match: '{{identifier}}'
      scope: meta.generic-name.meson

  generic-name:
    - match: '{{identifier}}'
      scope: meta.generic-name.meson
      pop: 1

  illegal-names:
    - match: '{{illegal_names}}\b'
      scope: invalid.illegal.name.meson

  illegal-name:
    - match: '{{illegal_names}}\b'
      scope: invalid.illegal.name.meson
      pop: 1

  parameter-names:
    - include: illegal-names
    - match: '{{identifier}}'
      scope: variable.parameter.meson


####[ LITERALS ]################################################################

  constants:
    - include: booleans

  booleans:
    - match: (?:true|false)\b
      scope: constant.language.boolean.meson
      push: illegal-assignment

  numbers:
    # https://mesonbuild.com/Syntax.html#numbers
    # hexadecimal
    - match: (0[xX])((?:\h)+)
      scope: meta.number.integer.hexadecimal.meson
      captures:
        1: constant.numeric.base.meson
        2: constant.numeric.value.meson
    # octal
    - match: (0[oO])((?:[0-7])+)(\d*)
      scope: meta.number.integer.octal.meson
      captures:
        1: constant.numeric.base.meson
        2: constant.numeric.value.meson
        3: invalid.illegal.digit.meson
    # binary
    - match: (0[bB])((?:[01])*)(\d*)
      scope: meta.number.integer.binary.meson
      captures:
        1: constant.numeric.base.meson
        2: constant.numeric.value.meson
        3: invalid.illegal.digit.meson
    # integer
    - match: (?:(0?)[1-9][\d_]*|0)
      scope: meta.number.integer.decimal.meson constant.numeric.value.meson
      captures:
        1: invalid.illegal.digits.meson


####[ STRINGS ]#################################################################

  strings:
    # triple-quoted version must be matched first
    - include: triple-single-quoted-strings
    - include: single-quoted-strings


####[ TRIPLE SINGLE QUOTED STRINGS ]############################################

  triple-single-quoted-strings:
    - include: triple-single-quoted-raw-strings

  triple-single-quoted-string-end:
    - match: "'''"
      scope: meta.string.meson string.quoted.single.block.meson punctuation.definition.string.end.meson
      set: after-expression

  triple-single-quoted-string-pop:
    - match: (?=''')
      pop: 1

  triple-single-quoted-raw-strings:
    # Triple-quoted raw string, treated as regex
    - match: "'''"
      scope: meta.string.meson string.quoted.single.block.meson punctuation.definition.string.begin.meson
      push: triple-single-quoted-raw-string-body

  triple-single-quoted-raw-string-body:
    - meta_include_prototype: false
    - meta_content_scope: meta.string.meson string.quoted.single.block.meson
    - include: triple-single-quoted-string-end
    - include: triple-single-quoted-raw-string-content
    # - match: ''
    #   push: scope:source.regexp.p ython
    #   with_prototype:
    #     - include: triple-single-quoted-string-pop

  triple-single-quoted-raw-string-content:
    - include: string-prototype


####[ SINGLE QUOTED STRINGS ]###################################################

  single-quoted-strings:
    - include: single-quoted-f-strings
    - include: single-quoted-u-strings

  single-quoted-string-end:
    - match: "'"
      scope: meta.string.meson string.quoted.single.meson punctuation.definition.string.end.meson
      set: after-expression
    - match: \n
      scope: meta.string.meson string.quoted.single.meson invalid.illegal.unclosed-string.meson
      set: after-expression
    - include: string-continuations

  single-quoted-string-pop:
    - match: (?='|\n)
      pop: 1
    - include: string-continuations

  single-quoted-u-strings:
    - match: (')
      scope: meta.string.meson string.quoted.single.meson punctuation.definition.string.begin.meson
      push: single-quoted-u-string-body

  single-quoted-u-string-body:
    - meta_include_prototype: false
    - meta_content_scope: meta.string.meson string.quoted.single.meson
    - include: single-quoted-string-end
    - include: single-quoted-u-string-syntax

  single-quoted-u-string-syntax:
    # Single-line string, unicode or not
    - match: (?=\S)
      set: single-quoted-plain-u-string-body

  single-quoted-plain-u-string-body:
    - meta_include_prototype: false
    - meta_content_scope: meta.string.meson string.quoted.single.meson
    - include: single-quoted-string-end
    - include: single-quoted-u-string-content

  single-quoted-u-string-content:
    - include: string-prototype
    - include: escaped-unicode-chars
    - include: escaped-chars
    - include: single-quoted-string-replacements

  single-quoted-f-strings:
    # Single-line f-string
    - match: (f)(')
      captures:
        1: storage.type.string.meson
        2: meta.string.meson string.quoted.single.meson punctuation.definition.string.begin.meson
      push: single-quoted-f-string-body

  single-quoted-f-string-body:
    - meta_include_prototype: false
    - meta_content_scope: meta.string.meson string.quoted.single.meson
    - include: single-quoted-string-end
    - include: single-quoted-f-string-content

  single-quoted-f-string-content:
    - include: string-prototype
    - include: single-quoted-f-string-replacements
    - include: escaped-unicode-chars
    - include: escaped-chars

  single-quoted-string-replacements:
    - match: (?=\{)
      branch_point: single-quoted-string-replacement
      branch:
        - single-quoted-string-replacement
        - string-replacement-fallback

  single-quoted-string-replacement:
    - match: \{
      scope: punctuation.definition.placeholder.begin.meson
      set: single-quoted-string-replacement-body

  single-quoted-string-replacement-body:
    - meta_scope: constant.other.placeholder.meson
    - include: string-replacement-body
    - match: \[
      scope: punctuation.section.brackets.begin.meson
      push: single-string-replacement-brackets-body
    - match: ':'
      scope: punctuation.separator.format-spec.meson
      push: single-quoted-string-replacement-formatspec-body
    - match: (?!\w) # restrict field names to reduce risk of false positives
      fail: single-quoted-string-replacement

  single-string-replacement-brackets-body:
    - include: string-replacement-brackets-body
    - include: single-quoted-string-replacement-fail

  single-quoted-string-replacement-formatspec-body:
    - meta_content_scope: meta.format-spec.meson constant.other.format-spec.meson
    - include: string-replacement-formatspec-body
    - match: \{
      scope: punctuation.definition.placeholder.begin.meson
      push: single-quoted-string-replacement-body
    - include: single-quoted-string-replacement-fail

  single-quoted-string-replacement-fail:
    - match: (?='|$)
      fail: single-quoted-string-replacement

  single-quoted-f-string-replacements:
    - include: f-string-replacements
    - match: \{
      scope: punctuation.section.interpolation.begin.meson
      push:
        - f-string-replacement-meta
        - single-quoted-f-string-replacement-formatspec
        - single-quoted-f-string-replacement-expression

  single-quoted-f-string-replacements-regexp:
    # Same as f-string-replacements, but will reset the entire scope stack.
    - include: f-string-replacements-regexp
    - match: \{
      scope: punctuation.section.interpolation.begin.meson
      push:
        - f-string-replacement-regexp-meta
        - single-quoted-f-string-replacement-formatspec
        - single-quoted-f-string-replacement-expression

  single-quoted-f-string-replacement-expression:
    - meta_content_scope: source.meson.embedded
    - include: f-string-replacement-expression
    - include: eol-pop

  single-quoted-f-string-replacement-formatspec:
    - meta_include_prototype: false
    - match: ':'
      scope: punctuation.separator.format-spec.meson
      set: single-quoted-f-string-replacement-formatspec-body
    - include: single-quoted-f-string-replacement-end

  single-quoted-f-string-replacement-formatspec-body:
    - meta_content_scope: meta.format-spec.meson constant.other.format-spec.meson
    - include: single-quoted-f-string-replacement-end
    - include: single-quoted-f-string-replacements

  single-quoted-f-string-replacement-end:
    - include: f-string-replacement-end
    - match: (?='|$)
      pop: 2


####[ STRING CONTENTS ]#########################################################

  string-continuations:
    - match: \\$
      scope: punctuation.separator.continuation.line.meson
      push:
        - meta_include_prototype: false
        - match: ^
          pop: 1

  escaped-chars:
    - match: \\[\\'abfnrtv]
      scope: constant.character.escape.meson
    - match: \\[0-7]{1,3}
      scope: constant.character.escape.octal.meson
    - match: \\x\h{2}
      scope: constant.character.escape.hex.meson

  escaped-unicode-chars:
    - match: \\u\h{4}
      scope: constant.character.escape.unicode.16bit.meson
    - match: \\U\h{8}
      scope: constant.character.escape.unicode.32bit.meson
    - match: \\N\{[-a-zA-Z ]+\}
      scope: constant.character.escape.unicode.name.meson

  string-replacement-body:
    - match: \}
      scope: punctuation.definition.placeholder.end.meson
      pop: 1
    - match: \.
      scope: punctuation.accessor.dot.meson
    - match: '![ars]\b'
      scope: storage.modifier.conversion.meson
    - include: escaped-chars

  string-replacement-brackets-body:
    - meta_scope: meta.brackets.meson
    - match: \]
      scope: punctuation.section.brackets.end.meson
      pop: 1
    - include: eol-pop
    - include: escaped-chars

  string-replacement-formatspec-body:
    - match: \}
      scope: punctuation.definition.placeholder.end.meson
      pop: 2
    - include: escaped-chars

  string-replacement-fallback:
    - match: \{
      pop: 1

  f-string-replacements:
    - include: invalid-f-string-replacements

  f-string-replacement-meta:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: meta.interpolation.meson
    - include: immediately-pop

  f-string-replacements-regexp:
    # Same as f-string-replacements, but will reset the entire scope stack
    # and has an additional match.
    - include: invalid-f-string-replacements

  f-string-replacement-regexp-meta:
    # Same as f-string-replacement, but with clear_scopes: true
    - clear_scopes: true
    - meta_include_prototype: false
    - meta_scope: source.meson meta.string.meson meta.interpolation.meson
    - include: immediately-pop

  f-string-replacement-expression:
    - match: (?:\s*(=)\s*)?(![ars])?(?=[:}])
      captures:
        1: storage.modifier.debug.meson
        2: storage.modifier.conversion.meson
      pop: 1
    - match: \\
      scope: invalid.illegal.backslash-in-fstring.meson
    - include: expression-in-a-sequence

  f-string-replacement-end:
    - match: \}
      scope: punctuation.section.interpolation.end.meson
      pop: 2

  invalid-f-string-replacements:
    - match: '\{\s*\}'
      scope: invalid.illegal.empty-expression.meson
    - include: illegal-stray-braces

  # for use by inheriting syntaxes to easily inject string interpolation
  # in any kind of quoted or unquoted string
  string-prototype: []


####[ PROTOTYPES ]##############################################################

  after-expression:
    - match: \s*(?=\()
      set: function-call-argument-list
    - match: \s*(?=\[)
      set: item-access
    - match: \s*(\\)\s*$
      captures:
        1: punctuation.separator.continuation.line.meson
      push: line-continuation-body
    - include: immediately-pop

  else-pop:
    - match: (?=\S)
      pop: 1

  eol-pop:
    - match: $
      pop: 1

  immediately-pop:
    - match: ''
      pop: 1

  line-continuation-or-pop:
    - include: line-continuations
    - match: (?=\s*[\n;#])
      pop: 1

  line-continuations:
    - match: (\\)\s*$
      captures:
        1: punctuation.separator.continuation.line.meson
      push: line-continuation-body

  line-continuation-body:
    - meta_include_prototype: false
    # This prevents strings after a continuation from being a docstring
    - include: strings
    - include: else-pop
    - match: ^(?!\s*[[:alpha:]]*['"])
      pop: 1
