{
	"scope": "source.meson",
	"completions": [
		{ "kind": "variable", "trigger": "build_machine",
			"contents": "build_machine.",
			"details": "The machine that is doing the actual compilation",
		},
		{ "kind": "variable", "trigger": "host_machine",
			"contents": "host_machine.",
			"details": "The machine on which the compiled binary will run",
		},
		{ "kind": "variable", "trigger": "include_directories",
			"contents": "include_directories:",
		},
		{ "kind": "variable", "trigger": "meson",
			"contents": "meson.",
			"details": "Introspect various properties of the system",
		},
		{ "kind": "variable", "trigger": "target_machine",
			"contents": "target_machine.",
			"details": "The machine on which the compiled binary's output will run",
		},
		
		{ "kind": "function", "trigger": "add_global_arguments",
			"contents": "add_global_arguments()",
			"details": "Add global arguments to the compiler command line",
		},
		{ "kind": "function", "trigger": "add_global_link_arguments",
			"contents": "add_global_link_arguments()",
			"details": "Add global arguments to the linker command line"
		},
		{ "kind": "function", "trigger": "add_languages",
			"contents": "add_languages()",
			"details": "Add programming languages used by the project"
		},
		{ "kind": "function", "trigger": "add_project_arguments",
			"contents": "add_project_arguments()",
			"details": "Add project specific arguments to the compiler command line",
		},
		{ "kind": "function", "trigger": "add_project_dependencies",
			"contents": "add_project_dependencies()",
			"details": "Add arguments to the compiler and linker command line",
		},
		{ "kind": "function", "trigger": "add_project_link_arguments",
			"contents": "add_project_link_arguments()",
			"details": "Add global arguments to the linker command line",
		},
		{ "kind": "function", "trigger": "add_test_setup",
			"contents": "add_test_setup()",
			"details": "Add a custom test setup",
		},
		{ "kind": "function", "trigger": "alias_target",
			"contents": "alias_target()",
			"details": "Create a new top-level target",
		},
		{ "kind": "function", "trigger": "assert",
			"contents": "assert()",
			"details": "Abort with an error message if condition evaluates to false",
		},
		{ "kind": "function", "trigger": "benchmark",
			"contents": "benchmark()",
			"details": "Create a benchmark item that will be run when the benchmark target is run",
		},
		{ "kind": "function", "trigger": "both_libraries",
			"contents": "both_libraries()",
			"details": "Build both a static and shared library with the given sources",
		},
		{ "kind": "function", "trigger": "build_target",
			"contents": "build_target()",
			"details": "Create a build target whose type can be set dynamically",
		},
		{ "kind": "function", "trigger": "configuration_data",
			"contents": "configuration_data()",
			"details": "Create an empty `configuration` object",
		},
		{ "kind": "function", "trigger": "configure_file",
			"contents": "configure_file()",
		},
		{ "kind": "function", "trigger": "custom_target",
			"contents": "custom_target()",
			"details": "Create a custom top level build target",
		},
		{ "kind": "function", "trigger": "debug",
			"contents": "debug()",
			"details": "Write the argument string to the meson build log",
		},
		{ "kind": "function", "trigger": "declare_dependency",
			"contents": "declare_dependency()",
		},
		{ "kind": "function", "trigger": "dependency",
			"contents": "dependency()",
			"details": "Find an external dependency",
		},
		{ "kind": "function", "trigger": "disabler",
			"contents": "disabler()",
			"details": "Return a `disabler` object",
		},
		{ "kind": "function", "trigger": "environment",
			"contents": "environment()",
			"details": "Return an empty `env` object",
		},
		{ "kind": "function", "trigger": "error",
			"contents": "error()",
			"details": "Print the argument string and halt the build process",
		},
		{ "kind": "function", "trigger": "executable",
			"contents": "executable()",
			"details": "Create a new executable",
		},
		{ "kind": "function", "trigger": "files",
			"contents": "files()",
		},
		{ "kind": "function", "trigger": "find_program",
			"contents": "find_program()",
		},
		{ "kind": "function", "trigger": "generator",
			"contents": "generator()",
			"details": "Create a generator object that can be used to run custom compilation commands",
		},
		{ "kind": "function", "trigger": "get_option",
			"contents": "get_option()",
			"details": "Obtain the value of a project build option",
		},
		{ "kind": "function", "trigger": "get_variable",
			"contents": "get_variable()",
			"details": "Dynamically obtain a variable",
		},
		{ "kind": "function", "trigger": "import",
			"contents": "import()",
			"details": "Import an extension module",
		},
		{ "kind": "function", "trigger": "include_directories",
			"contents": "include_directories()",
		},
		{ "kind": "function", "trigger": "install_data",
			"contents": "install_data()",
			"details": "Install files from the source tree",
		},
		{ "kind": "function", "trigger": "install_emptydir",
			"contents": "install_emptydir()",
			"details": "Install a new directory entry",
		},
		{ "kind": "function", "trigger": "install_headers",
			"contents": "install_headers()",
		},
		{ "kind": "function", "trigger": "install_man",
			"contents": "install_man()",
		},
		{ "kind": "function", "trigger": "install_subdir",
			"contents": "install_subdir()",
		},
		{ "kind": "function", "trigger": "install_symlink",
			"contents": "install_symlink()",
			"details": "Install a symbolic link to a specified target",
		},
		{ "kind": "function", "trigger": "is_disabler",
			"contents": "is_disabler()",
			"details": "`true` if a variable is a disabler and `false` otherwise",
		},
		{ "kind": "function", "trigger": "is_variable",
			"contents": "is_variable()",
			"details": "`true` if a variable of the given name exists and `false` otherwise",
		},
		{ "kind": "function", "trigger": "jar",
			"contents": "jar()",
			"details": "Build a jar from the specified Java source files",
		},
		{ "kind": "function", "trigger": "join_paths",
			"contents": "join_paths()",
			"details": "Join the given strings into a file system path segment",
		},
		{ "kind": "function", "trigger": "library",
			"contents": "library()",
			"details": "Build a static and/or shared library",
		},
		{ "kind": "function", "trigger": "message",
			"contents": "message()",
			"details": "Print to stdout",
		},
		{ "kind": "function", "trigger": "project",
			"contents": "project()",
			"details": "The first function called in each project, to initialize Meson",
		},
		{ "kind": "function", "trigger": "range",
			"contents": "range()",
			"details": "Return an opaque object that can be only be used in `foreach` statements",
		},
		{ "kind": "function", "trigger": "run_command",
			"contents": "run_command()",
			"details": "Run a command",
		},
		{ "kind": "function", "trigger": "run_target",
			"contents": "run_target()",
		},
		{ "kind": "function", "trigger": "set_variable",
			"contents": "set_variable()",
			"details": "Assign a value to the given variable name",
		},
		{ "kind": "function", "trigger": "shared_library",
			"contents": "shared_library()",
			"details": "Build a shared library",
		},
		{ "kind": "function", "trigger": "shared_module",
			"contents": "shared_module()",
			"details": "Build a shared module",
		},
		{ "kind": "function", "trigger": "static_library",
			"contents": "static_library()",
			"details": "Build a static library",
		},
		{ "kind": "function", "trigger": "structured_sources",
			"contents": "structured_sources()",
			"details": "Create a `StructuredSource` object",
		},
		{ "kind": "function", "trigger": "subdir",
			"contents": "subdir()",
			"details": "Enter the specified subdirectory and execute the meson.build file in it",
		},
		{ "kind": "function", "trigger": "subdir_done",
			"contents": "subdir_done()",
			"details": "Stop further interpretation of the Meson script file from the point of the invocation",
		},
		{ "kind": "function", "trigger": "subproject",
			"contents": "subproject()",
		},
		{ "kind": "function", "trigger": "summary",
			"contents": "summary()",
			"details": "Summarize build configuration at the end of the build process",
		},
		{ "kind": "function", "trigger": "test",
			"contents": "test()",
			"details": "Define a test to run with the test harness",
		},
		{ "kind": "function", "trigger": "unset_variable",
			"contents": "unset_variable()",
			"details": "Unset a variable",
		},
		{ "kind": "function", "trigger": "vcs_tag",
			"contents": "vcs_tag()",
			"details": "Detect revision control commit information at build time and places it in the specified output file",
		},
		{ "kind": "function", "trigger": "warning",
			"contents": "warning()",
			"details": "Print its argument to stdout prefixed with 'WARNING:'",
		},
	]
}
